# SPDX-FileCopyrightText: 2023 Klar√§lvdalens Datakonsult AB, a KDAB Group company <info@kdab.com>
#
# SPDX-License-Identifier: MIT

name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        compiler:
          - name: default
        config:
          - qt_version: 5.15.2
            macos_architectures: "x86_64"
          - qt_version: 6.6.2
            macos_architectures: "x86_64;arm64"
          - qt_version: 6.9.0 # bump freely to latest
            macos_architectures: "x86_64;arm64"

        include:
          # Add clang builds for Ubuntu
          - os: ubuntu-latest
            compiler:
              name: clang
              cc: clang
              cxx: clang++
            config:
              qt_version: 6.6.2
              macos_architectures: "x86_64;arm64"
          - os: ubuntu-latest
            compiler:
              name: clang
              cc: clang
              cxx: clang++
            config:
              qt_version: 6.9.0 # bump freely to latest
              macos_architectures: "x86_64;arm64"

    steps:
      - name: Install Qt ${{ matrix.config.qt_version }} with options and default aqtversion
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.config.qt_version }}
          cache: true

      - name: Install ninja-build tool (must be after Qt due PATH changes)
        uses: turtlesec-no/get-ninja@main

      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Make sure MSVC is found when Ninja generator is in use
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure project
        run: >
          cmake -S . -B ./build
          -DCMAKE_OSX_ARCHITECTURES="${{ matrix.config.macos_architectures }}"
          ${{ matrix.compiler.cc != '' && format('-DCMAKE_C_COMPILER={0}', matrix.compiler.cc) || '' }}
          ${{ matrix.compiler.cxx != '' && format('-DCMAKE_CXX_COMPILER={0}', matrix.compiler.cxx) || '' }}

      - name: Build Project
        run: cmake --build ./build

      - name: Run tests on Linux (offscreen)
        if: ${{ runner.os == 'Linux' }}
        run: ctest --test-dir ./build --output-on-failure
        env:
          QT_QPA_PLATFORM: offscreen
          QT_QUICK_BACKEND: software

      - name: Run tests on Window/macOS
        if: ${{ runner.os != 'Linux' }}
        run: ctest --test-dir ./build --output-on-failure

      - name: Read tests log when it fails
        uses: andstor/file-reader-action@v1
        if: ${{ failure() && startsWith(matrix.preset.name, 'ci-dev-') }}
        with:
          path: "./build/Testing/Temporary/LastTest.log"
